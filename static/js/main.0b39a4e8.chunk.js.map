{"version":3,"sources":["../../src/index.tsx","App.tsx","store/index.ts","index.tsx"],"names":["Store","listeners","subscribe","this","index","useActionSubscribe","sub","useEffect","callback","type","action","res","next","i","Value","value","useSelector","state","Buttons","dispatch","useDispatch","onClick","Subscribe","console","log","App","store","createStore","applyMiddleware","actionCallback","ReactDOM","render","document","getElementById"],"mappings":"mNAGMA,EAGF,CACFC,UADE,GAEFC,UAFE,Y,WAKA,OAFAC,KAAA,kBAEO,WACL,IAAMC,EAAQ,oBAAd,GAEA,2BAWOC,EAAqB,SAACC,EAAD,GAChCC,qBAAU,WAE8B,MADtC,wBAAWD,EACT,oBAAWE,EACWR,yBAApB,SAQF,EAGkBA,YAApB,KAdFO,K,EAoBiC,kBAAM,mBAAU,YACjD,IAAQE,EAASC,EAAjB,KAEMC,EAAMC,EAAZ,GAEA,KACE,IAAK,IAAIC,EAAT,EAAgBA,EAAIb,YAApB,OAA4Ca,IAC1Cb,gBAAsBA,eAAtBA,IAAkDA,kBAAlDA,GAIJ,YCnDIc,EAAQ,WACZ,IAAMC,EAAQC,aAAY,SAACC,GAAD,OAAsBA,EAAMF,SAEtD,OAAO,wCAAcA,IAGjBG,EAAU,WACd,IAAMC,EAAWC,cAUjB,OACE,6BACE,4BAAQC,QAVa,WACvBF,EAAS,CAAEV,KAAM,0BASf,KACA,4BAAQY,QAPa,WACvBF,EAAS,CAAEV,KAAM,0BAMf,OAKAa,EAAY,WAQhB,OAPAjB,EAAmB,uBAAuB,WACxCkB,QAAQC,IAAI,kBAEdnB,EAAmB,uBAAuB,WACxCkB,QAAQC,IAAI,kBAGP,MAaMC,EAVH,WACV,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,OCjCN,IAUeC,EAVDC,aAXd,WAA4D,IAApCV,EAAmC,uDAA3B,CAAEF,MAAO,GAAKL,EAAa,uCACzD,OAAQA,EAAOD,MACb,IAAK,sBACH,MAAO,CAAEM,MAAOE,EAAMF,MAAQ,GAChC,IAAK,sBACH,MAAO,CAAEA,MAAOE,EAAMF,MAAQ,GAChC,QACE,OAAOE,KAMX,CACEF,MAAO,GAETa,YAAgBC,ICZlBC,IAASC,OACP,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,OAEFM,SAASC,eAAe,U","file":"static/js/main.0b39a4e8.chunk.js","sourcesContent":["import { useEffect } from 'react';\nimport { Middleware } from 'redux';\n\nconst Store: {\n  listeners: Handler[];\n  subscribe: (obj: Handler) => () => void;\n} = {\n  listeners: [],\n  subscribe(obj: Handler) {\n    this.listeners.push(obj);\n\n    return () => {\n      const index = this.listeners.indexOf(obj);\n\n      this.listeners.splice(index, 1);\n    };\n  },\n};\n\ntype Callback = (action: unknown) => void;\n\ninterface Handler {\n  [key: string]: Callback;\n}\n\nexport const useActionSubscribe = (sub: Handler | string, callback?: Callback) => {\n  useEffect(() => {\n    if (typeof sub === 'string') {\n      if (typeof callback === 'function') {\n        const unsubscribe = Store.subscribe({\n          [sub]: callback,\n        });\n\n        return unsubscribe;\n      }\n\n      // throw Error('callback must be function');\n      return;\n    }\n\n    const unsubscribe = Store.subscribe(sub);\n\n    return unsubscribe;\n  }, []);\n};\n\nconst actionCallback: Middleware = () => (next) => (action) => {\n  const { type } = action;\n\n  const res = next(action);\n\n  if (type) {\n    for (let i = 0; i < Store.listeners.length; i++) {\n      Store.listeners[i] && Store.listeners[i][type] && Store.listeners[i][type](action);\n    }\n  }\n\n  return res;\n};\n\nexport default actionCallback;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { RootState } from './store';\nimport { useActionSubscribe } from 'react-redux-action-callback';\n\nconst Value = () => {\n  const value = useSelector((state: RootState) => state.value);\n\n  return <div>result: {value}</div>;\n};\n\nconst Buttons = () => {\n  const dispatch = useDispatch();\n\n  const onClickIncrement = () => {\n    dispatch({ type: 'counter/incremented' });\n  };\n\n  const onClickDecrement = () => {\n    dispatch({ type: 'counter/decremented' });\n  };\n\n  return (\n    <div>\n      <button onClick={onClickIncrement}>+</button>\n      <button onClick={onClickDecrement}>-</button>\n    </div>\n  );\n};\n\nconst Subscribe = () => {\n  useActionSubscribe('counter/incremented', () => {\n    console.log('incremented');\n  });\n  useActionSubscribe('counter/decremented', () => {\n    console.log('decremented');\n  });\n\n  return null;\n};\n\nconst App = () => {\n  return (\n    <div>\n      <Value />\n      <Buttons />\n      <Subscribe />\n    </div>\n  );\n};\n\nexport default App;\n","import { applyMiddleware, createStore } from 'redux';\nimport actionCallback from 'react-redux-action-callback';\n\nfunction counterReducer(state = { value: 0 }, action: any) {\n  switch (action.type) {\n    case 'counter/incremented':\n      return { value: state.value + 1 };\n    case 'counter/decremented':\n      return { value: state.value - 1 };\n    default:\n      return state;\n  }\n}\n\nconst store = createStore(\n  counterReducer,\n  {\n    value: 0,\n  },\n  applyMiddleware(actionCallback)\n);\n\nexport type RootState = ReturnType<typeof counterReducer>;\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}